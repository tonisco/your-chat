datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    emailVerified      DateTime?
    username           String?              @unique
    image              String?
    accounts           Account[]
    sessions           Session[]
    conversationMember ConversationMember[]
    messages           Message[]
    conversationAdmin  Conversation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Conversation {
    id                  String               @id @default(cuid())
    admin               User?                @relation(fields: [adminId], references: [id])
    adminId             String
    conversationMembers ConversationMember[]
    messages            Message[]
    latestMessage       Message?             @relation(name: "latestMessage", fields: [latestMessageId], references: [id])
    latestMessageId     String               @unique
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
}

model ConversationMember {
    id                  String       @id @default(cuid())
    hasReadlastMessage  Boolean
    unreadMessageNumber Int
    user                User         @relation(fields: [userId], references: [id])
    userId              String
    conversation        Conversation @relation(fields: [conversationId], references: [id])
    conversationId      String
    createdAt           DateTime     @default(now())
    updatedAt           DateTime     @updatedAt
}

model Message {
    id             String        @id @default(cuid())
    body           String
    isLatest       Conversation? @relation(name: "latestMessage")
    sender         User          @relation(fields: [senderId], references: [id])
    senderId       String
    conversation   Conversation  @relation(fields: [conversationId], references: [id])
    conversationId String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}
